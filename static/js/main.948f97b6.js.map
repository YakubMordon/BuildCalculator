{"version":3,"file":"static/js/main.948f97b6.js","mappings":"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","sources":["components/Navbar.js","components/UI/ButtonPressable.js","components/UI/Header.js","components/UI/Input.js","components/Stochastic.js","components/UI/ScrollWithHeader.js","components/Kolgomorov.js","components/MonteCarlo.js","providers/QuestionContext.js","components/Questions.js","App.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import { View, Text, StyleSheet } from 'react-native';\r\nimport { Link, Outlet } from \"react-router-native\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <>\r\n      <View style={styles.container}>\r\n        <Link to=\"/\" underlayColor=\"#f0f4f7\">\r\n            <Text style={styles.textColor}>Stochastic</Text>\r\n        </Link>\r\n        <Text style={styles.textColor}>|</Text>\r\n        <Link to=\"/kolgomorov\" underlayColor=\"#f0f4f7\">\r\n            <Text style={styles.textColor}>Kolgomorov</Text>\r\n        </Link>\r\n        <Text style={styles.textColor}>|</Text>\r\n        <Link to=\"/montecarlo\" underlayColor=\"#f0f4f7\">\r\n            <Text style={styles.textColor}>MonteCarlo</Text>\r\n        </Link>\r\n        <Text style={styles.textColor}>|</Text>\r\n        <Link to=\"/questions\" underlayColor=\"#f0f4f7\">\r\n            <Text style={styles.textColor}>Questions</Text>\r\n        </Link>\r\n      </View>\r\n\r\n      <Outlet />\r\n    </>\r\n  )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container:{\r\n    marginTop: 40, \r\n    backgroundColor: '#333333',\r\n    flexDirection: 'row', \r\n    justifyContent: 'space-around', \r\n    padding: 10\r\n  },\r\n  textColor:{\r\n    color: 'white'\r\n  }\r\n});\r\n\r\n\r\nexport default Navbar;","import { Text, Pressable, StyleSheet } from 'react-native';\r\n\r\n\r\nconst ButtonPressable = ({solver}) => {\r\n    return (\r\n        <Pressable style={styles.button} onPress={solver}>\r\n            <Text style={styles.textColor}>Нажміть</Text>\r\n        </Pressable>\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    button:{\r\n        alignItems: 'center', \r\n        justifyContent: 'center', \r\n        paddingVertical: 12, \r\n        paddingHorizontal: 32, \r\n        borderRadius: 4, \r\n        elevation: 3, \r\n        backgroundColor: '#454440'\r\n    },\r\n    textColor:{\r\n        color: 'white'\r\n    }\r\n});\r\n\r\nexport default ButtonPressable;","import { Text, StyleSheet } from 'react-native';\r\n\r\nconst Header = ({text}) => {\r\n    return (\r\n        <Text style={styles.header}>\r\n            {text}\r\n        </Text>\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  header:{\r\n    fontSize: 20, \r\n    fontWeight: \"600\"\r\n  }\r\n});\r\n\r\nexport default Header;","import { TextInput, StyleSheet } from 'react-native';\r\n\r\nconst Input = ({value, setter, text}) => {\r\n    return (\r\n        <TextInput \r\n            value={value} \r\n            onChangeText={(text) => setter(text)} \r\n            style={styles.input} \r\n            placeholder={text}\r\n        />\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  input:{\r\n    borderWidth: 0.5, width: '75%', textAlign: 'center'\r\n  }\r\n});\r\n\r\nexport default Input;","import { useState } from 'react';\r\nimport { View, TextInput, ScrollView, StyleSheet, Text } from 'react-native';\r\nimport ButtonPressable from './UI/ButtonPressable';\r\nimport Header from './UI/Header';\r\nimport Input from './UI/Input';\r\n\r\nconst Stochastic = () => {\r\n  const [matrix, setMatrix] = useState({row1: '', row2: '', row3: '', row4: '', row5: ''});\r\n  const [arr, setArr] = useState('');\r\n  const [tacts, setTacts] = useState('');\r\n  const [results, setResults] = useState([]);\r\n\r\n  const rowPlaceholders = ['перший', 'другий', 'третій', 'четвертий', \"п'ятий\"];\r\n\r\n  const handleInputChange = (inputName, text) => {\r\n    setMatrix((prevValues) => ({\r\n      ...prevValues,\r\n      [inputName]: text,\r\n    }));\r\n  };\r\n\r\n  const solveStochastic = () =>{\r\n    try{\r\n      let matrixOfNumbers = [];\r\n\r\n      for (let i = 1; i <= 5; i++) {\r\n        const array = matrix[`row${i}`].split(' ').map(Number);\r\n        matrixOfNumbers.push(array);\r\n      }\r\n\r\n      let states = arr.split(' ').map(Number)\r\n      \r\n      let tact = Number(tacts)\r\n\r\n      let row = 0;\r\n\r\n      let stateNumber = 0;\r\n\r\n      let array = []\r\n  \r\n      for(let i = 0; i < tact; i++){\r\n        if(stateNumber == states.length){\r\n          stateNumber = 0;\r\n        }\r\n\r\n        let equation = `${states[stateNumber]} <= `;\r\n\r\n        let counter = 0;\r\n\r\n        for(let j = 0; j < matrixOfNumbers[row].length; j++){\r\n          counter += matrixOfNumbers[row][j];\r\n\r\n          if(counter >= states[stateNumber]){\r\n            equation += `${matrixOfNumbers[row][j]}`\r\n            array = [...array,{stateOfSystem: `${j}`, equation: equation}];\r\n            row = j;\r\n            break;\r\n          } \r\n\r\n          equation += `${matrixOfNumbers[row][j]} + `;\r\n        }\r\n        stateNumber++;\r\n      }\r\n\r\n      setResults(array);\r\n    }catch(e){\r\n      console.log('error');\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <View>\r\n      <ScrollView contentContainerStyle={styles.mainContainer}>\r\n        <Header text={\"Переходи станів за тактами\"}/>\r\n\r\n        {rowPlaceholders.map((placeholder, index) => (\r\n          <TextInput\r\n            key={`row${index + 1}`}\r\n            value={matrix[`row${index + 1}`]}\r\n            onChangeText={(text) => handleInputChange(`row${index + 1}`, text)}\r\n            style={styles.input}\r\n            placeholder={`Введіть ${placeholder} рядок з матриці`}\r\n          />\r\n        ))\r\n        }\r\n        <Input value={arr} setter={setArr} text={\"Введіть стани\"}/>\r\n\r\n        <Input value={tacts} setter={setTacts} text={\"Введіть кількість тактів\"}/>\r\n          \r\n        <ButtonPressable solver={solveStochastic}/>\r\n\r\n        <View style={styles.container}>\r\n              <View style={styles.innerContainer}>\r\n                  {results.map((value, index) => (\r\n                      <View style={styles.innerContainer} key={index}>\r\n                        <Text style={styles.tableText}>{(index + 1) + ' )'} {value.equation}</Text>\r\n                        <Text style={styles.tableText}>Перекладемо у стан z{value.stateOfSystem}</Text>\r\n                      </View>\r\n                    ))\r\n                  }\r\n              </View>\r\n          </View>\r\n      </ScrollView>\r\n    </View>\r\n  )\r\n};\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  mainContainer:{\r\n    gap: 20, \r\n    marginTop: 25, \r\n    flexDirection: 'column', \r\n    alignItems: 'center'\r\n  },\r\n  container:{\r\n    width: '80%'\r\n  },\r\n  innerContainer: {\r\n    backgroundColor: '#55615f',\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n  },\r\n  input:{\r\n    borderWidth: 0.5, \r\n    width: '75%', \r\n    textAlign: 'center'\r\n  },\r\n  tableView:{\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    gap: 35\r\n  },  \r\n  tableText:{\r\n    fontSize: 17,\r\n    color: 'white'\r\n  },\r\n  finalText: {\r\n    fontSize: 18,\r\n    color: 'white'\r\n  },\r\n});\r\n\r\n\r\nexport default Stochastic;","import { View, Text, StyleSheet} from 'react-native';\r\n\r\n\r\nconst ScrollWithHeader = ({text, array}) => {\r\n    return (\r\n        <>\r\n            <Text style={styles.tableText}>{text}</Text>\r\n            <View style={styles.tableView}>\r\n            {\r\n                array.map((value, index) => (\r\n                <Text style={styles.tableText} key={index}>{value}</Text>\r\n                ))\r\n            }\r\n            </View>\r\n        </>\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  tableView:{\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    gap: 10\r\n  },\r\n  tableText:{\r\n    fontSize: 17,\r\n    marginVertical: 10,\r\n    color: 'white'\r\n  }\r\n});\r\n\r\nexport default ScrollWithHeader;","import { useState } from 'react';\r\nimport { View, Text, StyleSheet, ScrollView } from 'react-native';\r\nimport ButtonPressable from './UI/ButtonPressable';\r\nimport ScrollWithHeader from './UI/ScrollWithHeader';\r\nimport Input from './UI/Input';\r\nimport Header from './UI/Header';\r\n\r\n\r\nconst Kolgomorov = () => {\r\n    const [sequenceInput, setSequenceInput] = useState('');\r\n    const [result, setResult] = useState({modular: [], diff: 0, arr: [], distribution: []});\r\n\r\n    function findMaxDifference(arr) {\r\n      if (arr.length < 2) {\r\n        return null; \r\n      }\r\n    \r\n      let minElement = arr[0];\r\n      let maxElement = arr[0];\r\n    \r\n      for (let i = 1; i < arr.length; i++) {\r\n        if (arr[i] < minElement) {\r\n          minElement = arr[i];\r\n        }\r\n        if (arr[i] > maxElement) {\r\n          maxElement = arr[i];\r\n        }\r\n      }\r\n    \r\n      const maxDifference = maxElement - minElement;\r\n    \r\n      return maxDifference;\r\n    }\r\n\r\n    const solveKolgomorov = () =>{\r\n        try{\r\n            const numbers = sequenceInput.split(' ').map((elem) => Number(elem)).sort((a,b) => a - b);\r\n\r\n            let distributionArr = [];\r\n\r\n            const modular = numbers.map((value, index) => {\r\n                value = Math.abs(value - Number((index + 1) * 2));\r\n                distributionArr.push((index + 1) * 2);\r\n                return value;\r\n            });\r\n            \r\n            setResult({modular: modular, arr: numbers, distribution: distributionArr, diff: findMaxDifference(modular)});\r\n      \r\n          }catch(e){\r\n            console.log('error');\r\n          }\r\n    }\r\n\r\n    return (\r\n        <View style={styles.mainContainer}>\r\n            <Header text={\"Критерій Колгоморова-Смірнова\"}/>\r\n\r\n            <Input value={sequenceInput} setter={setSequenceInput} text={'Введіть послідовність випадкових чисел'}/>\r\n            \r\n            <ButtonPressable solver={solveKolgomorov}/>\r\n\r\n            <View style={styles.container}>\r\n              <View style={styles.innerContainer}>\r\n                  <ScrollView>\r\n                      <View style={styles.distributionView}>\r\n                        <ScrollWithHeader text={\"Рівномірний закон розподілу після сортування:\"} array={result.arr}/>\r\n                        <ScrollWithHeader text={\"\"} array={result.distribution}/>\r\n                      </View>\r\n                      <View>\r\n                      <ScrollWithHeader text={\"Віднімаємо числа по модулю і знаходимо найбільшу різницю:\"} array={result.modular}/>\r\n                      </View>\r\n                      <View>\r\n                        <Text style={styles.tableText}>Отже, найбільша різниця {result.diff}</Text>\r\n                        <Text style={styles.tableText}>Критерій Колгоморова-Смірнова: k = {result.diff}√{result.arr.length} = {(result.diff * Math.sqrt(result.arr.length)).toFixed(3)}</Text>\r\n                      </View>\r\n                  </ScrollView>\r\n              </View>\r\n          </View>\r\n        </View>\r\n    )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  mainContainer:{\r\n    gap: 20, \r\n    marginTop: 25, \r\n    flexDirection: 'column', \r\n    alignItems: 'center'\r\n  },\r\n  container:{\r\n    height: '70%', \r\n    width: '85%'\r\n  },\r\n  innerContainer: {\r\n    flex: 1,\r\n    backgroundColor: '#55615f'\r\n  },\r\n  distributionView:{\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginVertical: 10\r\n  },  \r\n  tableText:{\r\n    fontSize: 17,\r\n    marginVertical: 10,\r\n    color: 'white'\r\n  },\r\n  finalText: {\r\n    fontSize: 18,\r\n    color: 'white'\r\n  },\r\n});\r\n\r\nexport default Kolgomorov;","import { useState } from 'react';\r\nimport { LineChart } from 'react-native-chart-kit';\r\nimport { View, Text, ScrollView, StyleSheet } from 'react-native';\r\nimport ButtonPressable from './UI/ButtonPressable'\r\nimport Header from './UI/Header';\r\nimport Input from './UI/Input';\r\n\r\n\r\nconst MonteCarlo = () => {\r\n  const [sequenceInput, setSequenceInput] = useState('');\r\n  const [intervalInput, setIntervalInput] = useState('');\r\n  const [data, setData] = useState(0);\r\n  const [result, setResult] = useState([]);\r\n  const [finalString, setFinalString] = useState('');\r\n\r\n  const solveMontecarlo = () =>{\r\n\r\n    try{\r\n      const numbers = sequenceInput.split(' ').map(Number);\r\n      const interval = Number(intervalInput);\r\n\r\n      if(interval == 0) throw new Error(\"error\");\r\n      const uniqueNumbers = {};\r\n\r\n      numbers.forEach(number => {\r\n        uniqueNumbers[number] = (uniqueNumbers[number] || 0) + 1;\r\n      });\r\n\r\n      Object.keys(uniqueNumbers).forEach(key => {\r\n        uniqueNumbers[key] /= numbers.length;\r\n      });\r\n\r\n      let stringBuilder = []\r\n      \r\n      let finalString = `Значення випадкової величини, яка відповідає ймовірності ${interval} становить `;\r\n\r\n      let prev = 0;\r\n\r\n      let labels = [0]\r\n\r\n      let dataset = [0, 0, 0]\r\n\r\n      Object.keys(uniqueNumbers).forEach(key => {\r\n\r\n        labels = [...labels, key]\r\n\r\n        dataset = [...dataset, (prev + uniqueNumbers[key]).toFixed(2), (prev + uniqueNumbers[key]).toFixed(2)]\r\n\r\n        stringBuilder = [...stringBuilder, [`${key + 1}`, `${uniqueNumbers[key].toFixed(3)}`, `${(prev + uniqueNumbers[key]).toFixed(2)}`]];\r\n\r\n        if(interval >= prev && interval <= prev + uniqueNumbers[key]){\r\n          finalString += key + ' ';\r\n        }\r\n        prev += uniqueNumbers[key]\r\n\r\n      });\r\n      \r\n      let data = {\r\n        labels: labels, \r\n        datasets: [\r\n          {\r\n            data: dataset,\r\n          },\r\n        ],\r\n      };\r\n\r\n      setData(data);\r\n      setFinalString(finalString);\r\n      setResult(stringBuilder);\r\n    }catch(e){\r\n      console.log('error');\r\n    }\r\n  }\r\n\r\n  return (\r\n      <View style={styles.mainContainer}>\r\n          <Header text={\"Метод Монте-Карло\"}/>\r\n\r\n          <Input value={sequenceInput} setter={setSequenceInput} text={'Введіть послідовність випадкових чисел'}/>\r\n          <Input value={intervalInput} setter={setIntervalInput} text={'Введіть інтервал'}/>\r\n\r\n          <ButtonPressable solver={solveMontecarlo}/>\r\n\r\n          <View style={styles.tableView}> \r\n            <Text>Число</Text>\r\n            <Text>Ймовірність</Text>\r\n            <Text>Комутативна ймовірність</Text>\r\n          </View>\r\n          <View style={styles.container}>\r\n              <View style={styles.innerContainer}>\r\n                  <ScrollView>\r\n                      <View>\r\n                        {result.map((value, index) => (\r\n                          <View style={styles.tableView} key={index}>\r\n                            <Text style={styles.tableText}>{value[0]}</Text>\r\n                            <Text style={styles.tableText}>|</Text>\r\n                            <Text style={styles.tableText}>{value[1]}</Text>\r\n                            <Text style={styles.tableText}>|</Text>\r\n                            <Text style={styles.tableText}>{value[2]}</Text>\r\n                          </View>\r\n                        ))\r\n                        }\r\n                      </View>\r\n                      <View>\r\n                        <Text style={styles.finalText}>{finalString}</Text>\r\n                      </View>\r\n                      <View>\r\n                        <Text style={styles.tableText}>Лінійний графік</Text>\r\n                        {\r\n                          data ? <LineChart\r\n                            data={data}\r\n                            width={300}\r\n                            height={300}\r\n                            chartConfig={{\r\n                              backgroundColor: '#e26a00',\r\n                              backgroundGradientFrom: '#fb8c00',\r\n                              backgroundGradientTo: '#ffa726',\r\n                              decimalPlaces: 2,\r\n                              color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                              labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                              style: {\r\n                                borderRadius: 16,\r\n                              },\r\n                              propsForDots: {\r\n                                r: '0',\r\n                                strokeWidth: '2',\r\n                                stroke: '#ffa726',\r\n                              }\r\n                            }}\r\n                            style={{\r\n                              marginVertical: 8,\r\n                              borderRadius: 16,\r\n                            }}\r\n                          /> : <Text style={styles.tableText}>Графік не побудовано</Text>\r\n                        }\r\n                      </View>\r\n                  </ScrollView>\r\n              </View>\r\n          </View>\r\n      </View>\r\n  )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  mainContainer:{\r\n    gap: 20, \r\n    marginTop: 25, \r\n    flexDirection: 'column', \r\n    alignItems: 'center'\r\n  },\r\n  container:{\r\n    height: '60%', \r\n    width: '85%'\r\n  },\r\n  innerContainer: {\r\n    flex: 1,\r\n    backgroundColor: '#55615f'\r\n  },\r\n  tableView:{\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    gap: 35\r\n  },  \r\n  tableText:{\r\n    fontSize: 17,\r\n    color: 'white'\r\n  },\r\n  finalText: {\r\n    fontSize: 18,\r\n    color: 'white'\r\n  },\r\n});\r\n\r\nexport default MonteCarlo;","import React, { createContext } from 'react';\r\n\r\nexport const QuestionContext = createContext();\r\n\r\nconst question = [\r\n    {question: \"D-схема використовується для опису:\", answer:\"Неперервно-детермінованих моделей\"},\r\n    {question: \"Які задачі вирішуються на стадії макро проектування АСУ?\", answer:\"Розробка узагальненої моделі \"},\r\n    {question: \"Дискретно-детермінований автомат описується кортежем з шести елементів F=<Z,X,Y, φ, ψ, z0 > де ψ :\", answer:\"Функція виходів\"},\r\n    {question: \"При застосуванні критерія Х2 необхідно враховувати, що:\", answer:\"Значення спостерігаємих частот для кожної групи повинно бути не менше за п’ять\"},\r\n    {question: \"Конструювання моделі\", answer:`В процесі перетворення знань про систему в її математичну модель необхідно розв’язати 4 задачі: \r\n    1) визначити призначення моделі; \r\n    2) визначити, які компоненти повинні бути включені в склад системи; \r\n    3) визначити параметри і змінні, які відносяться до цих компонентів; \r\n    4) визначити функціональні співвідношення між компонентами, параметрами і змінними; \r\n    Експерименти по моделюванню проводяться з різними цілями, до яких можна віднести: \r\n    1) оцінка - це визначення наскільки добре система передбачуваної структури буде відповідати деяким конкретним критеріям; \r\n    2) порівняння - співставлення конкуруючих систем, які розраховані на виконання певної функції, робочих принципів або методик;\r\n    3) прогнозування - оцінка поведінки системи при деякому передбачуваному поєднанні робочих умов; \r\n    4) аналіз чутливості - виявлення з великої кількості діючих факторів тих, які в найбільшій степені впливають на загальну поведінку системи; \r\n    5) оптимізація - точне визначення такого поєднання діючих факторів і їх величин, при яких забезпечується найкращий відгук всієї системи вцілому; \r\n    6) виявлення функціональних співвідношень - визначення залежності між двома або декількома діючими факторами з однієї сторони і відгуком системи з іншої. \r\n    Чітке визначення призначення моделі здійснює суттєвий вплив на весь процес її конструювання і експериментальної перевірки. Етап визначення необхідного складу компонентів моделі передбачає перелічення всіх компонентів системи, які впливають як додатньо, так і від’ємно на ефективність її роботи.\r\n    `},\r\n    {question: \"Апаратний спосіб моделювання випадкових величин\", answer:`При апаратному способі генерації випадкові числа виробляються спеціальною електронною приставкою, яка є одним з зовнішніх пристроїв EOM. В якості фізичного ефекту, який лежить в основі таких генераторів чисел частіше всього використовуються шуми в електронних і напівпровідниках, явище розкладу радіоактивних елементів та інше. \r\n\r\n    Якщо провести масштабування і прийняти довжину інтервалу (t1,tn) за одиницю, то значення інтервалів часу xi = Δti = tin - ti − між сусідніми інтервалами UФ(t) будуть випадковими числами xi Є (0,1).\r\n    \r\n\r\n    Переваги:\r\n    1. Запас чисел необмежений \r\n    2. Витрачається мало операцій обчислювальної машини \r\n    3. Не займається місце в пам’яті машини\r\n\r\n    Недоліки:\r\n    1. Потрібна періодична перевірка \r\n    2. Не можна відтворити послідовність \r\n    3. використовується спеціальний пристрій\r\n\r\n    `},\r\n    \r\n    {question: \"F-схема використовується для опису:\", answer:\"Дискретно-детермінованих моделей\"},\r\n    {question: \"Які задачі вирішуються на стадії мікро проектування АСУ?\", answer:\"Створення ефективних забезпечуючих підсистем \"},\r\n    {question: \"Дискретно-детермінований автомат описується кортежем з шести елементів F=<Z,X,Y, φ, ψ, z0 > де Z :\", answer:\"Множина станів\"},\r\n    {question: \"На чому грунтується критерій Колмогорова-Смірнова?\", answer:\"На визначені найбільшої абсолютної різниці між емпіричним і теоретичним розподілом\"},\r\n    {question: \"Моделювання компонентів\", answer:`\r\n    При моделюванні окремих компонент або підсистем складної системи виникають задачі, які можна розділити на прямі і обернені.\r\n\r\n    Для неї можна виділити 3 основних об'єкта:\r\n    • вхід; \r\n    • безпосередньо систему; \r\n    • відгук;\r\n\r\n    Щоб моделювати такий функціональний блок ми повинні знати 2 з 3 об'єктів. Якщо відомі рівняння, які описують поведінку динамічної системи, то шляхом рішення прямої задачі можна знайти відгук системи на заданий вхідний сигнал. До задач подібного типу відноситься і така обернена задача: по заданому математичному опису системи і її відомому відгуку знайти вхідний сигнал, який викликав цей відгук. Цей клас задач відноситься до задач управління. Більш складна обернена задача виникає, коли задані сукупності вхідних і відповідних вихідних сигналів системи, а необхідно знайти математичний опис самої системи. Ця задача відома як задача ідентифікації або структурного синтезу системи. Складність полягає в тому, що одне і теж співвідношення між входами і виходами може узгоджуватися з декількома математичними виразами.\r\n\r\n    `},\r\n    {question: \"Табличний спосіб генерації псевдовипадкових чисел\", answer:`\r\n    Якщо випадкові числа оформлені у вигляді таблиці та розміщені в зовнішній або оперативній пам'яті EOM, попередньо сформувавши з них відповідний файл (масив чисел), то такий спосіб називається табличним.\r\n\r\nПереваги:\r\n1. Потрібна одноразова перевірка \r\n2. Можна відтворювати послідовність\r\n\r\nНедоліки:\r\n1. Запас чисел обмежений \r\n2. Займає багато місця в оперативній пам’яті або необхідний час на звертання до зовнішньої пам’яті.\r\n\r\n    `},\r\n\r\n    {question: \"Q-схема використовується для опису:\", answer:\"Неперервно-стохастичних моделей\"},\r\n    {question: \"Призначення моделювання на етапах розробки технічного та робочого проектів АСУ.\", answer:\"Синтез з множини допустимих варіанта системи\"},\r\n    {question: \"Дискретно-детермінований автомат описується кортежем з шести елементів F=<Z,X,Y, φ, ψ, z0 > де φ :\", answer:\"Функція переходів\"},\r\n    {question: \"Чим вимірюється якість наближення регресивної кривої до експериментальних даних?\", answer:\"Середньоквадратичним відхиленням\"},\r\n    {question: \"Вибірковий метод Монте-Карло\", answer:`\r\n    В методі Монте-Карло дані попереднього спостереження виробляються штучним шляхом, використовуючи деякі генератори випадкових чисел в поєднанні з інтегральною функцією розподілу ймовірностей для досліджуваного процесу. Таким генератором може бути таблиця, колесо рулетки, підпрограма ЕОМ, або будь-яке інше джерело рівномірно розподілених чисел. Розподіл, який підлягає розігруванню може бути оснований на емпіричних даних або може представляти відомий теоретичний розподіл. Випадкові числа використовуються для отримання дискретного ряду випадкових змінних, який імітує результати, які можна було б очікувати у відповідності з розігруваним ймовірнісним розподілом.\r\n    `},\r\n    {question: \"Регресивний аналіз\", answer:`\r\n    Математичний метод, який забезпечує таку підгонку вибраної кривої, при якій експериментальні точки накладаються на неї найкращим чином в сенсі критерію найменших квадратів називається регресивним аналізом. Під наближенням кривої до експериментальних даних будемо розуміти тільки процес обчислення значень констант або параметрів таким чином, щоб сума квадратичних відхилень була мінімальною. Аналітик повинен попередньо вибрати найкраще апроксимуюче рівняння. \r\n    `},\r\n\r\n    {question: \"A-схема використовується для опису:\", answer:\"Узагальнених моделей\"},\r\n    {question: \"Призначення моделювання на етапах обстеження об'єкту управління і розробки технічного завдання на проектування АСУ.\", answer:\"В компактній формі представити інформацію про об'єкт\"},\r\n    {question: \"При графічному представленні дискретно-детермінованого автомата кожна дуга позначається елементами:\", answer:\"xi, yj\"},\r\n    {question: \"Призначення методу Монте-Карло\", answer:\"Отримання вибіркових значень за функцією закону розподілу\"},\r\n    {question: \"Моделювання як метод наукового пізнання\", answer:`\r\n    Гіпотези і аналогії, які відображають реально об'єктивно існуючий світ, повинні мати наочність або зводитися до зручних для дослідження логічних схем. Такі логічні схеми, які спрощують судження і логічні побудови або дозволяють проводити експерименти, які уточнюють природу явища, називаються моделями. Інакше, модель - це об'єкт-заміщувач об'єкта оригінала, який забезпечує вивчення деяких властивостей оригінала. \r\nЗаміщення одного об'єкта іншим з метою отримання інформації про властивості об'єкта-оригінала за допомогою об'єкта-моделі називається моделюванням. Таким чином, моделювання може бути визначено як представлення об’єкта моделлю для отримання інформації про об’єкт шляхом проведення експериментів з його моделлю. Теорія заміщення одних об'єктів (оригіналів) іншими об’єктами (моделями) і дослідження властивостей об'єктів на їх моделях називається теорією моделювання. \r\nЯкщо результати моделювання підтверджуються і можуть служити основою для прогнозування процесів, які відбуваються в досліджуваних об'єктах, то кажуть, що модель адекватна об'єкту. При цьому адекватність моделі залежить від мети моделювання і прийнятих критеріїв. \r\nПроцес моделювання передбачає наявність об'єкта дослідження, дослідника, перед яким стоїть конкретна задача, моделі, яка створюється для отримання інформації про об'єкт і необхідна для рішення поставленої задачі.\r\n    `},\r\n    {question: \"Критерій Колмогорова-Смірнова\", answer:`\r\n    Він застосовується у тих випадках, коли перевіряємий розподіл неперервний і відомі середнє і дисперсія сукупності. Таблиця його критичних значень була опублікована Смірновим в 1948р. і багаторазово перевидавалася. Подібно критерію χ квадрат критерій Колмогорова-Смірнова може бути використаний для перевірки відповідності між розподілом сукупності емпіричних даних і деяким конкретним теоретичним розподілом. Перевірка здійснюється шляхом задання інтегральної функції, яка випливає з 4 теоретичного розподілу, і її порівняння з інтегральною функцією розподілу емпіричних даних. \r\nПорівняння базується на вибірковій групі, в якій експериментальний розподіл має найбільше абсолютне відхилення по відношенню до теоретичного. Далі ця абсолютна різниця порівнюється з критичним значенням з метою визначення чи може таке відхилення бути випадковим при заданому законі розподілу.\r\n    `},\r\n\r\n    {question: \"В чому полягає особливість застосування системного підходу до побудови моделі системи?\", answer:\"Розглядає систему шляхом переходу від загального до часткового\"},\r\n    {question: \"Який вид моделювання належить до математичного?\", answer:\"Імітаційне\"},\r\n    {question: \"Дискретно-детермінований асинхронний автомат під дією вхідного сигналу може:\", answer:\"Декілька разів змінити свій стан\"},\r\n    {question: \"Агрегат визначається сукупністю випадкових операторів V , U , W , G  де U:\", answer:\"Оператор, який визначає стан агрегата на проміжку часу (tn , tn+1), коли не поступає ніяких вхідних сигналів \"},\r\n    {question: \"Дискретно-детерміновані моделі\", answer:`\r\n    Особливості дискретно-детермінованого підходу на етапі формалізації процесу функціонування систем розглянемо на прикладі використання в якості математичного апарату теорію автоматів. Теорія автоматів – це розділ теоретичної кібернетики, в якому вивчаються математичні моделі – автомати. На основі цієї теорії система представляється у вигляді автомата, який перетворює дискретну інформацію і змінює свій внутрішній стан лише в допустимі моменти часу. Поняття автомата варіюється в залежності від характеру конкретно вивчаємих систем, від прийнятого рівня абстракції і доцільної степені спільності. \r\nАвтомат можна представити як деякий пристрій (чорну скриньку), на який подаються вхідні сигнали і знімаються вихідні і яке може мати деякі внутрішні стани. Скінченим автоматом називається автомат, у якого множина внутрішніх станів і вхідних сигналів (а відповідно, і множина вихідних сигналів) є скінченими множинами. \r\nАбстрактно скінчений автомат можна представити як математичну схему, яка характеризується шістьма елементами: скінченою множиною X вхідних сигналів (вхідний алфавіт), скінченою множиною Y вихідних сигналів (вихідний алфавіт), скінченою множиною Z внутрішніх станів (внутрішній алфавіт), початковим станом z0, функцією переходів φ (z,x), функцією виходів ψ (z,x). Автомат, який задається F-схемою \r\nF=(Z, X, Y, φ , ψ , z0) \r\nфункціонує в дискретному автоматному часі, моментами якого є такти, кожному з яких відповідають постійні значення вхідного і вихідного сигналів і внутрішній стан\r\n    `},\r\n    {question: \"Збір фактичного матеріала\", answer:`\r\n    Джерелами даних є вимірювання і спостереження, але також і інші засоби отримання інформації: документи, інтерв'ю і особиста участь в роботі. До документів відносяться: керівництво, креслення, інструкції, звіти, специфікації, кореспонденції та ін. Дані, які вибираються з документів і інтерв'ю, слід розглядати як попередні, треба перевіряти їх правдивість по інших джерелах і порівнювати потім з даними досліду і спостережень. Проведення інтерв'ю в процесі моделювання має на меті наступне: \r\n    1) виявити і перевірити факти; \r\n    2) виявити потенційні джерела протидії можливим змінам, які можуть виникнути в результаті моделювання. \r\n    Завжди важливо розрізняти факти і думки. І ті, і інші необхідні і цінні, але обходитись з ними слід по-різному. \r\n    Після збору всіх необхідних даних з документів і інтерв'ю вивчаючий повинен всюди, де це можливо, прийняти особисту участь в роботі системи і оцінити вихідні дані, які поступають з інших джерел. При цих умовах можна сподіватися, що спостереження і особиста участь, інтерв'ю і аналіз документації будуть сприяти формуванню правильних представлень про систему і про те як вона діє в реальних і передбачуваних умовах. Розглянемо можливі методи документування інформації, яка виявляється на етапі пошуку і виявлення фактів з метою забезпечити ефективне їх використання.    \r\n    `},\r\n\r\n    {question: \"Який вид моделювання належить до символічного?\", answer:\"Знакове\"},\r\n    {question: \"При графічному представленні дискретно-стохастичного автомата дуги графа позначаються величинами, значення яких належать проміжку:\", answer:\"(0,1)\"},\r\n    {question: \"Коефіцієнт завантаження системи визначає:\", answer:\"Відношення сумарного часу продуктивної роботи системи до загального часу функціонування\"},\r\n    {question: \"Дискретно-стохастичні моделі\", answer:`\r\n    Розглянемо особливості побудови математичних схем при дискретно-стохастичному підході до формалізації процесу функціонування досліджуваної системи S. Оскільки сутність дискретизації часу при цьому підході залишається аналогічною розглянутим в попередній лекції скінченим автоматам, то вплив фактору стохастичності простежимо також на різновидності таких автоматів, а саме на ймовірнісних (стохастичних) автоматах. \r\nВ загальному виді ймовірнісний автомат можна визначити як дискретний потактовий перетворювач інформації з пам’яттю, функціонування якого в кожному такті залежить тільки від стану пам’яті в ньому і може бути описане статистично. \r\nЗастосування схем ймовірнісних автоматів (Р-схем) має важливе значення для розробки методів проектування дискретних систем, які проявляють статистично закономірну випадкову поведінку, для з’ясування алгоритмічних можливостей таких систем і обґрунтування границь доцільності їх використання, а також для рішення задач синтезу за вибраним критерієм дискретних стохастичних систем, які задовольняють заданим обмеженням. \r\nВведемо математичне поняття Р-автомата, використовуючи поняття, яке було введено для F-автомата. Розглянемо множину G, яка представляє собою елементи (zk,xi), де zk – стан, zk Є Z; xi – вхідний сигнал, xi Є X. Якщо існують функції φ (zk,xi) і ψ (zk,xi), які відображають множину G відповідно на множини Z і Y (G→Z і G→Y), то говорять, що F=(Z, X, Y, φ , ψ ) визначає автомат детермінованого типу.\r\n    `},\r\n    {question: \"Блок-схеми і органіграми\", answer:`\r\n    Блок-схема відображає головні елементи або підсистеми моделі і показує існуючі між ними взаємозв'язки. Стрілками вказують напрямки зв'язків між елементами, а самі елементи (підсистеми) відображають прямокутниками з пояснювальними надписами всередині. \r\nОрганіграма в основному складається з ліній, які з'єднують символи або прямокутники (блоки), всередині яких робляться скорочені надписи. Символи представляють групи елементарних кроків (операцій), які відображають поведінку системи, яка аналізується у часі. Написи всередині символів вказують, що робиться на кожному кроці. Запис реалізуємого процесу ведеться зверху вниз.\r\n    `},\r\n\r\n    {question: \"Яка особливість стохастичного виду моделювання?\", answer:\"Розглядаються ймовірнісні процеси в системі\"},\r\n    {question: \"При описі дискретно-стохастичних автоматів задається множина розподілів В, яка визначає відображення:\", answer:\"X x Z → Z x Y\"},\r\n    {question: \"Яке з визначень не відповідає найпростішому потоку?\", answer:\"Потік з обмеженою післядією\"},\r\n    {question: \"Агрегат визначається сукупністю випадкових операторів V , U , W , G  де W\", answer:\"Оператор, який визначає стан агрегата в особливий момент часу tδ,коли відбувається скачок стану\"},\r\n    {question: \"Неперервно-стохастичні моделі\", answer:`\r\n    Застосування цього підходу розгланемо на прикладі використання математичних схем систем масового обслуговування. Для всіх цих моделей характерним є випадковий процес їх функціонування. Розглянемо одноканальну систему масового обслуговування.\r\n\r\nде Yi-вихідний потік, \r\nui-час обслуговування заявки, \r\nwi-час очікування обслуговування заявкою, \r\nλi- кількість заявок, які поступають в одиницю часу, \r\nni- кількість заявок в системі, \r\nni=li+ρi, де ρі- коефіцієнт завантаження, li- кількість заявок в черзі.\r\n\r\nПотік подій називається однорідним, якщо він характеризується тільки моментами наступлення цих подій, {tn} 0=t1<t2<tn n і ніяк не характеризує самі події. Однорідний потік подій може також задаватися проміжками часу між послідовними подіями {τn}, τ1=t1-t0, τ2=t2-t1, ..., τn=tn-tn-1.\r\n\r\nПотік неоднорідних подій - це послідовність, яка характеризується двома параметрами {tn,fn}, tn- моменти часу наступлення події, fn- набір ознак цієї події. \r\nПотік подій називається потоком з обмеженою післядією, якщо сумісна функція густини інтервалів τi може бути представлена наступним чином: f(z1,z2,...,zn)=f(z1)f(z2)...f(zn).\r\n    `},\r\n    {question: \"Технологічні діаграми\", answer:`\r\n    Технологічна карта (ТК) процесу представляє собою відносно простий в використанні засіб детального і поетапного опису того, як протікають або можуть протікати деякі виробничі, технологічні або які-небудь інші процеси. Вона відображає логічну послідовність операцій в стиснутій формі. Універсальність технологічних карт дещо обмежена. Вони зручні для простеження поетапного руху лише одиночного виробу або матеріалу, документу, а також дій однієї людини. Відображення руху множини документів, матеріалів і людей значно складніше. \r\n\r\n    Технологічні карти вперше були розроблені Джілбретом, а пізніше удосконалені іншими спеціалістами. Джілбрет розробив скорочений спосіб запису процесу за допомогою умовних знаків - символів, кожен з яких позначав наявність або відсутність деякого виду операцій. З роками його 39 символів були спрощені. Отримали широке розповсюдження 5 символів, які дозволяють наочно представити більшість операцій, які зустрічаються при вивченні функціонування систем\r\n    `},\r\n\r\n    {question: \"Що не є перевагою імітаційного моделювання?\", answer:\"Можна дослідити систему при будь-яких умовах\"},\r\n    {question: \"Інтенсивність потоку заявок задає:\", answer:\"Середній час між моментами поступлення заявок\"},\r\n    {question: \"Агрегат визначається сукупністю випадкових операторів V , U , W , G  де G:\", answer:\"оператор, який визначає вихідний сигнал при досягненні підмножини станів Zy\"},\r\n    {question: \"Одна з переваг використання теоретичного закону розподілу при застосуванні метода Монте-Карло полягає в можливості:\", answer:\"Зменшення дисперсії вибіркових даних\"},\r\n    {question: \"Критерій Х2\", answer:`\r\n    Для статистичної оцінки гіпотези про те, що сукупність емпіричних, або вибіркових, даних незначно відрізняється від той, яку можна очікувати при деякому теоретичному законі розподілу, ми можемо розглянути два види випробувань на відповідність. Один з параметрів, який дозволяє оцінити розбіжність між спостерігаємими і очікуваними частотами є величина χ квадрат . Статистика χ квадрат визначається наступним виразом:\r\n\r\nχ квадрат = сума з і = 1 по k (f0 - fe)^2/ fe, де\r\n\r\nf0 – частота, яка спостерігається для кожної групи або інтервалу ; \r\nfe – очікувана частота для кожної групи або інтервалу. \r\nСума по k - це передбачена теоретичним розподілом сума по всіх групах або інтервалах.\r\n\r\nЯкщо χ квадрат =0, то спостерігаємі і теоретично передбачені значення частот точно співпадають. Якщо χ квадрат >0, то повного співпадіння немає. Чим більше величина χ квадрат , тим більше розходження між спостерігаємими і очікуваними значеннями. Якщо χ квадрат >0 , то ми повинні порівняти наші розрахункові значення з табличними значеннями χ квадрат для того, щоб оцінити, наскільки спостерігаємі дані визначаються тільки випадковими причинами.\r\n    `},\r\n    {question: \"Узагальнені моделі\", answer:`\r\n    Цей підхід базується на понятті агрегативної системи, який дає можливість описувати поведінку як неперервних так і дискретних систем, як детермінованих так і стохастичних. При агрегативному описі складний об'єкт розбивається на скінчену кількість частин (підсистем), зберігаючи при цьому зв'язки, які забезпечують їх взаємодію. Цей процес розбиття може продовжуватись до тих пір, поки не утворяться підсистеми, які в умовах задачі моделювання є зручними для математичного опису. В результаті такої декомпозиції складна система представляється у вигляді багаторівневої конструкції із взаємозв'язками елементів, які об'єднані в підсистеми різних рівнів. \r\nВ якості елемента A-схеми виступає агрегат, а зв'язок між агрегатами всередині системи S із зовнішнім середовищем E здійснюється за допомогою оператора спряження R. В свою чергу, агрегат може розглядатися як A-схема. Будь-який агрегат характеризується наступними множинами: \r\n- множина часу T; \r\n- множина вхідних сигналів X; \r\n- множина вихідних сигналів Y; \r\n- множина станів Z; \r\n- множина внутрішніх параметрів H;\r\n    `},\r\n]\r\n\r\nconst QuestionProvider = ({children}) => {\r\n\r\n    return (\r\n        <QuestionContext.Provider value={question}>\r\n            {children}\r\n        </QuestionContext.Provider>\r\n    );\r\n}\r\n\r\nexport default QuestionProvider;\r\n","import React, { useContext, useState } from 'react';\r\nimport { View, ScrollView, Text, StyleSheet } from 'react-native';\r\nimport { QuestionContext } from '../providers/QuestionContext';\r\nimport Header from './UI/Header';\r\nimport Input from './UI/Input';\r\n\r\nconst Questions = () => {\r\n    const [questionInput, setQuestionInput] = useState(\"\");\r\n    const [answersList, setAnswersList] = useState([]);\r\n\r\n    const questionContext = useContext(QuestionContext);\r\n\r\n    const findQuestion = (str) => {\r\n        const filteredArray = questionContext.filter((value) => {\r\n            return value.question.toLowerCase().includes(str.toLowerCase());\r\n        });\r\n        setQuestionInput(str);\r\n        setAnswersList(filteredArray);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.mainContainer}>\r\n            <Header text={\"Відповіді на запитання\"}/>\r\n\r\n            <Input value={questionInput} setter={findQuestion} text={'Введіть запитання'}/>\r\n\r\n            <View style={styles.container}>\r\n                <View style={styles.innerContainer}>\r\n                    <ScrollView>\r\n                        {\r\n                            answersList.length !== 0 ? (\r\n                                answersList.map((element, index) =>(\r\n                                    <View style={styles.questionView} key={index}>\r\n                                        <Text style={styles.tableText}>{\"Запитання: \\n\\n\" + element.question}</Text>\r\n                                        <Text style={styles.tableText}>{\"Відповідь: \\n\\n\" + element.answer}</Text>\r\n                                    </View>\r\n                                ))\r\n                            ):(\r\n                                <Text style={styles.tableText}>Відповідей не було знайдено</Text>\r\n                            )\r\n                        }\r\n                    </ScrollView>\r\n                </View>\r\n            </View>\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default Questions;\r\n\r\nconst styles = StyleSheet.create({\r\n    mainContainer:{\r\n      gap: 20, \r\n      marginTop: 25, \r\n      flexDirection: 'column', \r\n      alignItems: 'center'\r\n    },\r\n    container:{\r\n      height: '75%', \r\n      width: '90%'\r\n    },\r\n    innerContainer: {\r\n      flex: 1,\r\n      backgroundColor: '#55615f'\r\n    },\r\n    tableText:{\r\n      fontSize: 18,\r\n      fontWeight: '700',\r\n      marginVertical: 10,\r\n      color: 'white'\r\n    },\r\n    questionView:{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        marginVertical: 20\r\n    }\r\n});","import { View, StyleSheet } from 'react-native';\r\nimport { NativeRouter, Route, Routes} from 'react-router-native';\r\nimport Navbar from './components/Navbar';\r\nimport Stochastic from './components/Stochastic';\r\nimport Kolgomorov from './components/Kolgomorov';\r\nimport MonteCarlo from './components/MonteCarlo';\r\nimport QuestionProvider from './providers/QuestionContext';\r\nimport Questions from './components/Questions';\r\n\r\nexport default function App() {\r\n  return (\r\n    <QuestionProvider>\r\n      <NativeRouter>\r\n        <View style={styles.container}>\r\n          <Routes>\r\n            <Route path=\"/\" element={<Navbar />} >\r\n              <Route path=\"/\" element={<Stochastic />}/>\r\n              <Route path=\"/questions\" element={<Questions />}/>\r\n              <Route path=\"/kolgomorov\" element={<Kolgomorov />}/>\r\n              <Route path=\"/montecarlo\" element={<MonteCarlo />}/>\r\n            </Route>\r\n          </Routes>\r\n        </View>\r\n      </NativeRouter>\r\n    </QuestionProvider>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container:{\r\n    width: '100%'\r\n  }\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [854], () => (__webpack_require__(6271)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["styles","StyleSheet","create","container","marginTop","backgroundColor","flexDirection","justifyContent","padding","textColor","color","_jsxs","_Fragment","children","View","style","_jsx","Link","to","underlayColor","Text","Outlet","button","alignItems","paddingVertical","paddingHorizontal","borderRadius","elevation","_ref","solver","Pressable","onPress","header","fontSize","fontWeight","text","input","borderWidth","width","textAlign","value","setter","TextInput","onChangeText","placeholder","mainContainer","gap","innerContainer","display","tableView","tableText","finalText","_useState","useState","row1","row2","row3","row4","row5","_useState2","_slicedToArray","matrix","setMatrix","_useState3","_useState4","arr","setArr","_useState5","_useState6","tacts","setTacts","_useState7","_useState8","results","setResults","ScrollView","contentContainerStyle","Header","map","index","inputName","prevValues","_objectSpread","_defineProperty","handleInputChange","Input","ButtonPressable","matrixOfNumbers","i","array","split","Number","push","states","tact","row","stateNumber","length","equation","counter","j","concat","_toConsumableArray","stateOfSystem","e","console","log","marginVertical","height","flex","distributionView","sequenceInput","setSequenceInput","modular","diff","distribution","result","setResult","findMaxDifference","minElement","maxElement","numbers","elem","sort","a","b","distributionArr","Math","abs","ScrollWithHeader","sqrt","toFixed","intervalInput","setIntervalInput","data","setData","_useState9","_useState10","finalString","setFinalString","interval","Error","uniqueNumbers","forEach","number","Object","keys","key","stringBuilder","prev","labels","dataset","datasets","LineChart","chartConfig","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","arguments","undefined","labelColor","propsForDots","r","strokeWidth","stroke","QuestionContext","createContext","question","answer","Provider","questionInput","setQuestionInput","answersList","setAnswersList","questionContext","useContext","str","filteredArray","filter","toLowerCase","includes","element","questionView","App","QuestionProvider","NativeRouter","Routes","Route","path","Navbar","Stochastic","Questions","Kolgomorov","MonteCarlo","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","id","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","splice","n","getter","__esModule","d","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","this","then","ns","def","current","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","g","globalThis","Function","window","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}